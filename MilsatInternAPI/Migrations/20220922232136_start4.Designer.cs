// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20220922232136_start4")]
    partial class start4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("MentorId");

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("fdab5574-06c1-4d07-9e5f-c978dc422786"),
                            CreatedOn = new DateTime(2022, 9, 22, 23, 21, 36, 285, DateTimeKind.Utc).AddTicks(757),
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("7ce664b2-9402-4ea4-9d43-0a8bef117cce"),
                            CreatedOn = new DateTime(2022, 9, 22, 23, 21, 36, 285, DateTimeKind.Utc).AddTicks(759),
                            Status = 0
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("fdab5574-06c1-4d07-9e5f-c978dc422786"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 145, 234, 254, 246, 243, 16, 147, 184, 43, 160, 208, 115, 250, 199, 128, 51, 226, 167, 167, 9, 171, 27, 163, 58, 56, 36, 184, 180, 112, 101, 130, 83, 40, 18, 23, 90, 92, 123, 109, 120, 149, 39, 193, 81, 172, 196, 30, 145, 22, 130, 40, 4, 29, 223, 103, 101, 246, 170, 131, 39, 78, 116, 150, 99 },
                            PasswordSalt = new byte[] { 138, 88, 87, 60, 109, 127, 6, 110, 115, 195, 216, 74, 239, 187, 21, 229, 247, 234, 222, 169, 249, 215, 209, 31, 15, 254, 246, 94, 70, 194, 117, 173, 201, 95, 172, 89, 100, 87, 108, 145, 70, 240, 172, 141, 66, 151, 215, 210, 1, 184, 102, 89, 57, 31, 143, 60, 251, 102, 179, 255, 101, 161, 149, 8, 158, 8, 15, 12, 157, 163, 167, 26, 64, 47, 110, 92, 57, 150, 231, 161, 68, 16, 161, 208, 16, 173, 86, 198, 126, 208, 16, 188, 147, 216, 216, 69, 118, 57, 115, 106, 87, 238, 122, 42, 197, 214, 222, 118, 145, 142, 68, 185, 44, 71, 190, 188, 176, 242, 54, 40, 110, 60, 122, 155, 85, 78, 60, 178 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("7ce664b2-9402-4ea4-9d43-0a8bef117cce"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 222, 46, 77, 46, 251, 203, 218, 143, 207, 201, 28, 159, 65, 66, 1, 221, 53, 217, 144, 199, 200, 189, 7, 207, 152, 213, 214, 168, 174, 59, 226, 174, 129, 75, 250, 220, 40, 250, 92, 111, 188, 198, 97, 123, 75, 53, 80, 208, 25, 200, 252, 40, 71, 184, 187, 112, 36, 32, 190, 202, 208, 128, 225, 130 },
                            PasswordSalt = new byte[] { 163, 16, 208, 107, 241, 29, 224, 114, 59, 223, 7, 48, 51, 215, 5, 163, 249, 222, 68, 60, 43, 41, 131, 198, 249, 190, 178, 143, 235, 117, 136, 79, 216, 120, 28, 85, 141, 237, 27, 179, 227, 119, 129, 79, 111, 182, 14, 96, 161, 76, 118, 94, 191, 134, 138, 118, 142, 119, 154, 89, 238, 134, 169, 132, 29, 9, 232, 118, 123, 22, 222, 26, 66, 243, 127, 95, 100, 146, 124, 122, 160, 234, 123, 213, 115, 246, 208, 243, 113, 204, 208, 223, 87, 101, 198, 12, 89, 26, 235, 241, 130, 9, 177, 9, 182, 184, 204, 56, 143, 214, 15, 63, 254, 217, 30, 50, 248, 205, 73, 133, 197, 172, 61, 123, 32, 154, 162, 17 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("f006954e-ec99-4b2e-ae63-bd4ddab5dc8e"),
                            Bio = "",
                            Department = 6,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 71, 12, 190, 96, 66, 202, 134, 44, 238, 253, 97, 195, 55, 199, 137, 18, 236, 142, 124, 241, 4, 219, 189, 112, 136, 41, 184, 49, 75, 247, 215, 125, 133, 11, 252, 52, 88, 216, 31, 193, 49, 52, 86, 72, 153, 186, 71, 90, 31, 198, 82, 217, 87, 236, 215, 28, 236, 68, 18, 115, 11, 120, 255, 59 },
                            PasswordSalt = new byte[] { 133, 4, 161, 135, 200, 146, 224, 218, 48, 65, 227, 108, 156, 189, 23, 94, 157, 220, 87, 32, 107, 162, 118, 104, 194, 143, 38, 177, 57, 97, 222, 65, 206, 120, 195, 43, 183, 103, 231, 68, 243, 143, 220, 18, 114, 161, 26, 163, 191, 155, 162, 176, 53, 16, 59, 135, 119, 144, 36, 139, 63, 0, 223, 97, 38, 65, 162, 172, 225, 50, 87, 246, 166, 137, 149, 153, 200, 195, 53, 41, 180, 136, 5, 119, 78, 242, 86, 242, 119, 167, 151, 249, 212, 37, 95, 215, 105, 120, 187, 56, 63, 114, 109, 159, 177, 72, 99, 33, 15, 203, 207, 68, 127, 150, 188, 103, 19, 12, 21, 155, 239, 90, 208, 193, 242, 34, 5, 208 },
                            PhoneNumber = "home",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.Mentor", "Mentor")
                        .WithMany("Interns")
                        .HasForeignKey("MentorId");

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
