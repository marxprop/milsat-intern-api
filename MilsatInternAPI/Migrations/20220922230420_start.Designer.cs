// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20220922230420_start")]
    partial class start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 9, 22, 23, 4, 20, 639, DateTimeKind.Utc).AddTicks(5894),
                            Status = 0,
                            UserId = new Guid("ba7720c3-d86f-4865-a55b-80aa8a7a0553")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 9, 22, 23, 4, 20, 639, DateTimeKind.Utc).AddTicks(5896),
                            Status = 0,
                            UserId = new Guid("1cc2a7ba-b24d-4b87-962f-16d677767037")
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("MentorId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ba7720c3-d86f-4865-a55b-80aa8a7a0553"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 97, 230, 204, 114, 160, 255, 240, 107, 61, 136, 77, 232, 6, 98, 62, 182, 125, 93, 240, 9, 63, 75, 58, 35, 47, 181, 37, 223, 69, 177, 132, 142, 57, 148, 84, 83, 0, 183, 124, 70, 103, 127, 33, 80, 116, 48, 64, 81, 152, 73, 81, 176, 32, 179, 112, 139, 167, 92, 129, 59, 213, 153, 111, 87 },
                            PasswordSalt = new byte[] { 181, 10, 216, 57, 59, 199, 14, 113, 19, 59, 4, 72, 249, 36, 220, 78, 233, 4, 142, 107, 192, 135, 231, 222, 73, 129, 178, 244, 153, 173, 248, 212, 76, 50, 30, 85, 225, 195, 207, 161, 160, 154, 142, 173, 168, 93, 116, 146, 15, 239, 14, 89, 156, 36, 19, 96, 129, 32, 166, 62, 74, 110, 53, 53, 12, 143, 177, 255, 9, 124, 153, 45, 51, 32, 206, 214, 229, 52, 164, 59, 15, 200, 134, 186, 243, 20, 128, 223, 1, 152, 21, 128, 152, 181, 115, 85, 133, 143, 55, 124, 18, 191, 175, 232, 204, 42, 19, 159, 118, 87, 78, 105, 181, 65, 211, 9, 177, 252, 240, 230, 21, 128, 55, 203, 43, 162, 193, 62 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("1cc2a7ba-b24d-4b87-962f-16d677767037"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 255, 36, 82, 98, 59, 210, 18, 200, 1, 34, 186, 178, 115, 197, 113, 215, 203, 246, 39, 200, 31, 181, 110, 61, 140, 123, 124, 94, 169, 172, 252, 184, 99, 222, 144, 105, 85, 210, 215, 115, 96, 67, 54, 254, 205, 191, 253, 174, 26, 114, 1, 211, 22, 7, 158, 157, 192, 82, 16, 223, 82, 187, 45, 134 },
                            PasswordSalt = new byte[] { 207, 40, 94, 89, 153, 80, 123, 177, 199, 122, 141, 113, 97, 19, 187, 222, 234, 128, 171, 184, 210, 119, 21, 16, 9, 143, 223, 170, 114, 204, 143, 26, 126, 10, 252, 64, 29, 187, 112, 14, 2, 248, 183, 3, 60, 124, 80, 47, 31, 2, 126, 234, 22, 224, 103, 52, 25, 23, 96, 24, 85, 176, 102, 237, 107, 202, 89, 43, 92, 100, 68, 215, 18, 230, 64, 125, 224, 203, 179, 182, 213, 58, 138, 184, 133, 26, 18, 233, 250, 199, 48, 81, 219, 126, 29, 174, 211, 80, 22, 45, 36, 130, 33, 49, 12, 235, 250, 202, 200, 90, 12, 44, 135, 155, 204, 150, 90, 85, 161, 55, 180, 36, 54, 181, 123, 124, 23, 71 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("055004a1-92f9-46a0-9646-8bb1398e8d7b"),
                            Bio = "",
                            Department = 6,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 80, 31, 87, 214, 34, 91, 154, 0, 123, 48, 253, 184, 156, 28, 131, 29, 88, 3, 142, 145, 126, 196, 119, 44, 242, 231, 35, 208, 49, 167, 33, 87, 198, 110, 162, 145, 59, 74, 187, 248, 241, 152, 46, 37, 151, 131, 133, 184, 149, 76, 75, 179, 159, 119, 162, 73, 25, 114, 99, 134, 73, 196, 235, 16 },
                            PasswordSalt = new byte[] { 100, 107, 137, 33, 34, 223, 126, 231, 77, 248, 3, 171, 157, 200, 100, 100, 12, 46, 92, 177, 48, 221, 255, 143, 61, 78, 157, 59, 40, 42, 107, 233, 9, 55, 21, 90, 102, 26, 74, 251, 43, 163, 115, 229, 67, 226, 63, 207, 43, 175, 55, 236, 149, 215, 246, 80, 34, 224, 14, 211, 18, 193, 197, 30, 60, 85, 133, 42, 192, 254, 173, 16, 186, 42, 241, 97, 254, 45, 140, 179, 165, 215, 91, 217, 207, 38, 16, 191, 103, 87, 149, 147, 149, 142, 120, 39, 23, 89, 48, 135, 159, 140, 69, 216, 192, 248, 233, 237, 215, 53, 250, 47, 51, 80, 153, 22, 194, 217, 57, 68, 41, 168, 55, 207, 17, 22, 193, 65 },
                            PhoneNumber = "home",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.Mentor", null)
                        .WithMany("Interns")
                        .HasForeignKey("MentorId");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
