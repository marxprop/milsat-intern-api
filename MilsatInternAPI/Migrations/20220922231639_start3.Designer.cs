// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20220922231639_start3")]
    partial class start3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MentorId1")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("MentorId1");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 9, 22, 23, 16, 39, 57, DateTimeKind.Utc).AddTicks(5503),
                            Status = 0,
                            UserId = new Guid("747cc885-aaea-43db-85aa-c47168d05bdb")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 9, 22, 23, 16, 39, 57, DateTimeKind.Utc).AddTicks(5505),
                            Status = 0,
                            UserId = new Guid("d09230de-e3a0-49a8-8893-fe7906d895fc")
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("747cc885-aaea-43db-85aa-c47168d05bdb"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 223, 221, 5, 145, 241, 229, 85, 234, 210, 27, 51, 34, 18, 156, 226, 246, 138, 161, 119, 115, 222, 188, 238, 171, 68, 44, 217, 89, 146, 12, 126, 233, 66, 118, 22, 162, 32, 246, 239, 171, 166, 38, 159, 255, 244, 238, 214, 94, 53, 26, 207, 253, 39, 120, 113, 185, 211, 3, 255, 123, 138, 2, 236, 178 },
                            PasswordSalt = new byte[] { 75, 73, 45, 136, 51, 151, 189, 152, 133, 202, 41, 41, 113, 241, 69, 160, 26, 134, 26, 212, 159, 84, 177, 146, 162, 12, 166, 63, 163, 112, 221, 126, 18, 57, 9, 73, 150, 55, 108, 37, 43, 122, 124, 134, 25, 184, 39, 155, 71, 33, 112, 123, 252, 195, 112, 38, 182, 226, 231, 67, 50, 177, 194, 43, 181, 112, 220, 126, 255, 247, 191, 228, 246, 181, 107, 157, 131, 246, 156, 146, 86, 188, 9, 84, 69, 148, 141, 158, 185, 232, 127, 103, 115, 202, 131, 52, 114, 101, 170, 49, 182, 249, 54, 131, 19, 195, 92, 193, 165, 243, 40, 172, 81, 161, 19, 162, 100, 28, 73, 88, 36, 227, 227, 47, 234, 18, 237, 118 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("d09230de-e3a0-49a8-8893-fe7906d895fc"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 7, 198, 90, 23, 210, 96, 172, 238, 49, 130, 58, 234, 215, 211, 219, 10, 9, 120, 124, 59, 30, 101, 162, 175, 122, 138, 30, 249, 166, 118, 43, 32, 142, 205, 56, 151, 9, 255, 187, 219, 91, 77, 186, 57, 20, 249, 188, 149, 153, 159, 156, 97, 134, 158, 172, 55, 192, 251, 184, 183, 17, 190, 122, 247 },
                            PasswordSalt = new byte[] { 109, 133, 75, 1, 219, 255, 143, 160, 114, 71, 97, 243, 56, 235, 22, 180, 74, 12, 216, 209, 221, 51, 216, 197, 119, 139, 108, 194, 210, 138, 231, 180, 61, 6, 114, 101, 140, 137, 28, 38, 72, 174, 175, 71, 238, 61, 54, 242, 172, 44, 72, 217, 231, 160, 24, 3, 191, 21, 187, 200, 87, 186, 71, 160, 104, 190, 50, 184, 70, 129, 56, 249, 169, 118, 234, 47, 161, 125, 10, 228, 22, 79, 126, 24, 103, 155, 73, 240, 137, 55, 124, 141, 123, 148, 114, 37, 203, 122, 76, 232, 207, 92, 109, 208, 252, 183, 159, 122, 180, 24, 105, 103, 96, 190, 83, 17, 192, 17, 235, 24, 238, 123, 159, 213, 81, 55, 143, 49 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("f80584c0-b27e-422b-8b5d-192a2895a567"),
                            Bio = "",
                            Department = 6,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 117, 65, 187, 111, 45, 31, 112, 226, 16, 138, 154, 134, 98, 213, 255, 85, 124, 208, 53, 52, 237, 3, 60, 24, 70, 185, 114, 204, 239, 11, 13, 35, 149, 224, 56, 9, 181, 219, 19, 182, 163, 78, 190, 43, 148, 186, 25, 31, 235, 249, 98, 211, 196, 167, 154, 55, 104, 186, 163, 159, 65, 28, 198, 228 },
                            PasswordSalt = new byte[] { 185, 157, 136, 37, 130, 177, 169, 80, 238, 160, 139, 201, 154, 129, 59, 62, 85, 99, 146, 103, 116, 62, 193, 234, 147, 189, 28, 83, 69, 89, 91, 171, 167, 146, 193, 189, 17, 108, 241, 200, 160, 181, 124, 245, 45, 121, 64, 182, 141, 17, 165, 89, 226, 43, 47, 51, 195, 69, 248, 79, 226, 67, 97, 10, 96, 129, 231, 184, 238, 7, 110, 200, 228, 236, 109, 0, 139, 30, 95, 251, 180, 82, 11, 213, 112, 105, 182, 234, 249, 1, 216, 209, 35, 217, 100, 14, 56, 102, 7, 168, 126, 29, 112, 79, 50, 218, 242, 87, 129, 187, 215, 187, 109, 166, 187, 228, 154, 232, 232, 189, 46, 24, 219, 116, 174, 224, 209, 142 },
                            PhoneNumber = "home",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.HasOne("MilsatInternAPI.Models.Mentor", null)
                        .WithMany("Interns")
                        .HasForeignKey("MentorId1");

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
