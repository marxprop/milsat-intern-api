// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20220923121818_fresh-start")]
    partial class freshstart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("MentorId");

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f7446f14-f6f2-4df6-bc26-5618ff050b98"),
                            CreatedOn = new DateTime(2022, 9, 23, 12, 18, 18, 776, DateTimeKind.Utc).AddTicks(352),
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("8a89f847-9d2e-482d-b3e7-bc0efffb4419"),
                            CreatedOn = new DateTime(2022, 9, 23, 12, 18, 18, 776, DateTimeKind.Utc).AddTicks(354),
                            Status = 0
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f7446f14-f6f2-4df6-bc26-5618ff050b98"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 166, 179, 103, 193, 122, 161, 70, 109, 103, 108, 152, 248, 172, 246, 99, 38, 80, 194, 187, 121, 42, 161, 182, 225, 25, 118, 201, 109, 213, 40, 115, 25, 134, 148, 8, 219, 222, 225, 169, 92, 14, 126, 87, 0, 60, 49, 221, 38, 131, 10, 249, 190, 196, 219, 136, 171, 148, 50, 87, 30, 128, 240, 141, 11 },
                            PasswordSalt = new byte[] { 20, 95, 129, 210, 80, 216, 65, 45, 146, 16, 238, 106, 125, 98, 169, 153, 40, 130, 129, 213, 121, 39, 120, 81, 100, 8, 190, 97, 95, 21, 255, 246, 21, 133, 219, 84, 38, 189, 128, 120, 76, 155, 131, 5, 224, 247, 232, 64, 4, 38, 205, 124, 45, 75, 141, 21, 231, 139, 139, 56, 244, 63, 98, 179, 11, 62, 132, 221, 107, 32, 18, 72, 9, 52, 219, 119, 192, 70, 101, 9, 140, 81, 243, 122, 23, 121, 65, 7, 44, 238, 137, 148, 15, 7, 5, 12, 208, 196, 195, 113, 61, 67, 122, 44, 105, 249, 159, 26, 151, 2, 55, 10, 107, 192, 126, 208, 46, 237, 207, 140, 151, 30, 220, 39, 21, 235, 101, 252 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("8a89f847-9d2e-482d-b3e7-bc0efffb4419"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 230, 35, 212, 15, 152, 159, 222, 245, 252, 227, 34, 215, 146, 10, 130, 88, 169, 100, 20, 76, 48, 210, 52, 120, 244, 230, 20, 4, 222, 8, 241, 88, 189, 240, 163, 232, 254, 62, 95, 41, 245, 2, 244, 205, 224, 40, 124, 187, 199, 21, 156, 193, 203, 204, 148, 221, 251, 37, 221, 220, 39, 252, 139, 233 },
                            PasswordSalt = new byte[] { 98, 215, 228, 45, 116, 146, 241, 250, 48, 155, 197, 52, 97, 83, 36, 46, 189, 74, 59, 120, 241, 96, 47, 19, 187, 250, 228, 19, 68, 130, 154, 240, 119, 193, 19, 73, 40, 71, 190, 189, 192, 78, 197, 134, 106, 120, 26, 79, 78, 243, 172, 231, 54, 67, 225, 216, 152, 112, 251, 73, 93, 82, 229, 97, 140, 234, 242, 56, 95, 16, 193, 133, 120, 91, 246, 208, 110, 249, 59, 136, 107, 212, 145, 109, 108, 88, 183, 139, 156, 170, 43, 5, 221, 145, 65, 216, 86, 128, 56, 245, 92, 50, 251, 209, 230, 2, 56, 218, 122, 30, 199, 9, 101, 156, 247, 60, 44, 216, 219, 159, 33, 144, 111, 148, 239, 202, 111, 214 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("fc958a8f-9605-4b72-824c-79ff1b9a27f6"),
                            Bio = "",
                            Department = 5,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 181, 34, 172, 3, 86, 186, 25, 97, 153, 121, 37, 221, 204, 96, 38, 75, 118, 215, 127, 236, 208, 98, 160, 103, 128, 145, 174, 79, 159, 11, 12, 26, 218, 104, 74, 8, 57, 112, 9, 168, 77, 110, 171, 215, 225, 147, 227, 68, 181, 9, 61, 231, 130, 48, 234, 71, 149, 2, 35, 201, 243, 226, 51, 151 },
                            PasswordSalt = new byte[] { 32, 221, 212, 181, 214, 84, 43, 0, 40, 24, 31, 60, 131, 240, 192, 221, 204, 131, 231, 124, 204, 82, 160, 52, 33, 76, 204, 29, 244, 226, 10, 133, 235, 128, 44, 56, 83, 158, 225, 82, 79, 236, 27, 155, 212, 76, 195, 185, 148, 94, 125, 54, 85, 71, 60, 234, 166, 86, 201, 177, 150, 65, 93, 173, 253, 68, 86, 105, 2, 87, 112, 74, 200, 126, 0, 23, 28, 84, 152, 138, 76, 118, 240, 133, 99, 238, 8, 176, 140, 140, 40, 139, 60, 202, 193, 5, 49, 146, 88, 218, 59, 92, 37, 223, 219, 182, 229, 28, 205, 48, 113, 249, 199, 199, 140, 85, 110, 185, 204, 130, 21, 51, 133, 98, 232, 178, 157, 60 },
                            PhoneNumber = "home",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.Mentor", "Mentor")
                        .WithMany("Interns")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
