// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20221007151518_fresh_start")]
    partial class fresh_start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("MentorId");

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("029c4009-88e6-496f-8bab-78c8a2692d16"),
                            CreatedOn = new DateTime(2022, 10, 7, 15, 15, 18, 679, DateTimeKind.Utc).AddTicks(1222),
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("4a522966-4e85-4212-9302-ef1a68038653"),
                            CreatedOn = new DateTime(2022, 10, 7, 15, 15, 18, 679, DateTimeKind.Utc).AddTicks(1225),
                            Status = 0
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PasswordTokenExpires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("029c4009-88e6-496f-8bab-78c8a2692d16"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 251, 121, 15, 145, 42, 77, 169, 217, 26, 75, 90, 174, 131, 15, 185, 115, 42, 189, 241, 153, 48, 161, 252, 120, 221, 163, 212, 28, 234, 24, 26, 102, 13, 66, 113, 230, 207, 111, 6, 28, 151, 165, 129, 251, 205, 49, 10, 80, 41, 217, 173, 96, 152, 149, 45, 81, 133, 189, 184, 33, 75, 149, 218, 225 },
                            PasswordSalt = new byte[] { 19, 139, 165, 195, 132, 205, 249, 91, 28, 246, 75, 238, 152, 12, 2, 113, 210, 22, 228, 207, 83, 101, 64, 11, 97, 173, 220, 23, 201, 159, 78, 47, 60, 63, 246, 116, 51, 19, 221, 155, 159, 72, 2, 161, 181, 237, 127, 72, 113, 7, 106, 176, 222, 26, 227, 38, 46, 210, 201, 129, 209, 200, 111, 228, 18, 152, 214, 108, 183, 214, 110, 225, 190, 103, 245, 41, 201, 99, 81, 200, 113, 95, 123, 115, 119, 207, 198, 13, 89, 188, 220, 141, 233, 122, 41, 87, 155, 9, 229, 238, 144, 208, 140, 176, 46, 11, 6, 242, 14, 12, 105, 78, 33, 185, 204, 51, 45, 205, 126, 132, 79, 225, 164, 156, 186, 89, 251, 39 },
                            PasswordTokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "passwords",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            UserId = new Guid("4a522966-4e85-4212-9302-ef1a68038653"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 140, 38, 120, 80, 11, 229, 240, 215, 47, 238, 89, 175, 36, 118, 123, 80, 26, 68, 197, 230, 160, 25, 65, 34, 85, 149, 168, 88, 150, 6, 15, 31, 241, 170, 246, 75, 101, 232, 128, 224, 209, 141, 79, 23, 123, 207, 109, 91, 165, 70, 160, 157, 18, 200, 5, 127, 215, 55, 10, 248, 211, 79, 29, 229 },
                            PasswordSalt = new byte[] { 164, 158, 42, 86, 113, 234, 85, 195, 194, 125, 233, 16, 39, 229, 238, 84, 130, 54, 214, 51, 170, 139, 76, 9, 122, 119, 59, 194, 179, 62, 34, 136, 136, 19, 186, 77, 223, 151, 210, 59, 106, 160, 140, 122, 165, 244, 124, 14, 79, 209, 195, 17, 0, 18, 57, 74, 159, 141, 4, 117, 92, 39, 196, 110, 160, 201, 195, 96, 79, 218, 214, 232, 242, 60, 98, 182, 105, 28, 68, 118, 214, 45, 208, 216, 197, 18, 71, 145, 213, 100, 125, 108, 170, 161, 198, 203, 213, 161, 63, 53, 201, 250, 129, 194, 160, 143, 83, 145, 246, 138, 15, 203, 36, 130, 222, 23, 181, 26, 65, 210, 46, 7, 57, 22, 112, 254, 211, 112 },
                            PasswordTokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "passwords",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            UserId = new Guid("ba759bfb-59b5-49a1-850f-1d1f5ba270df"),
                            Bio = "",
                            Department = 5,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 244, 2, 39, 184, 215, 255, 70, 93, 151, 114, 169, 11, 215, 145, 232, 201, 221, 68, 58, 193, 150, 14, 111, 145, 50, 78, 66, 210, 12, 211, 62, 76, 245, 3, 10, 205, 65, 173, 152, 164, 212, 102, 125, 75, 253, 200, 37, 87, 34, 63, 110, 67, 57, 124, 199, 89, 193, 25, 118, 216, 132, 132, 247, 87 },
                            PasswordSalt = new byte[] { 48, 126, 156, 171, 74, 58, 188, 250, 234, 60, 69, 187, 10, 32, 187, 177, 45, 37, 32, 181, 25, 217, 6, 157, 251, 246, 7, 148, 249, 12, 6, 14, 252, 173, 202, 89, 130, 196, 226, 251, 183, 108, 199, 27, 254, 231, 170, 158, 125, 131, 20, 118, 18, 54, 227, 108, 2, 28, 189, 85, 188, 100, 68, 128, 239, 159, 194, 197, 147, 243, 251, 171, 212, 59, 99, 50, 7, 242, 138, 70, 240, 212, 95, 205, 221, 210, 23, 39, 42, 135, 82, 222, 115, 97, 239, 40, 37, 225, 33, 91, 223, 177, 188, 125, 60, 39, 0, 147, 244, 201, 110, 214, 8, 164, 138, 102, 202, 201, 182, 182, 128, 211, 54, 71, 145, 4, 146, 214 },
                            PasswordTokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "datasolutions",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.Mentor", "Mentor")
                        .WithMany("Interns")
                        .HasForeignKey("MentorId");

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
