// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20220926130912_setnull")]
    partial class setnull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("MentorId");

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("bd4b3ae7-63ca-47d4-995d-b94878dcaad5"),
                            CreatedOn = new DateTime(2022, 9, 26, 13, 9, 11, 822, DateTimeKind.Utc).AddTicks(5476),
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("000135bd-b67f-4216-9110-bc5988187ba8"),
                            CreatedOn = new DateTime(2022, 9, 26, 13, 9, 11, 822, DateTimeKind.Utc).AddTicks(5478),
                            Status = 0
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("bd4b3ae7-63ca-47d4-995d-b94878dcaad5"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 182, 140, 130, 45, 169, 12, 179, 211, 92, 122, 148, 73, 220, 28, 30, 87, 6, 161, 169, 51, 140, 80, 3, 225, 182, 124, 239, 162, 84, 250, 9, 150, 118, 3, 59, 199, 232, 205, 158, 50, 140, 159, 32, 13, 228, 184, 110, 105, 206, 245, 125, 105, 79, 44, 79, 6, 129, 127, 93, 117, 248, 113, 42, 184 },
                            PasswordSalt = new byte[] { 232, 181, 85, 167, 119, 88, 199, 248, 91, 163, 47, 94, 236, 142, 129, 80, 150, 116, 152, 136, 211, 82, 196, 10, 72, 204, 135, 160, 86, 248, 36, 191, 74, 176, 104, 27, 83, 90, 74, 218, 203, 53, 222, 93, 112, 97, 36, 222, 172, 240, 213, 45, 236, 101, 76, 139, 145, 49, 199, 27, 69, 202, 211, 245, 231, 112, 145, 242, 134, 168, 42, 141, 171, 154, 120, 4, 164, 241, 220, 192, 76, 170, 232, 214, 31, 104, 137, 51, 1, 40, 16, 143, 176, 238, 60, 104, 35, 238, 212, 16, 147, 202, 118, 178, 140, 239, 152, 56, 149, 106, 138, 49, 176, 96, 86, 219, 115, 249, 93, 147, 52, 196, 139, 39, 169, 202, 28, 146 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("000135bd-b67f-4216-9110-bc5988187ba8"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 154, 107, 51, 175, 71, 31, 86, 171, 223, 145, 98, 194, 251, 37, 74, 178, 25, 72, 105, 42, 174, 237, 196, 241, 1, 237, 113, 9, 206, 106, 241, 8, 32, 185, 74, 120, 215, 18, 104, 240, 57, 45, 72, 16, 147, 31, 247, 7, 238, 37, 228, 73, 179, 26, 203, 176, 52, 219, 190, 132, 56, 229, 89, 127 },
                            PasswordSalt = new byte[] { 225, 91, 180, 37, 102, 98, 107, 74, 144, 196, 206, 194, 125, 93, 66, 133, 219, 142, 201, 106, 108, 119, 214, 204, 245, 36, 66, 154, 181, 96, 207, 137, 222, 17, 192, 42, 255, 27, 85, 18, 253, 245, 93, 98, 134, 168, 123, 146, 28, 89, 139, 236, 223, 73, 194, 89, 238, 16, 243, 162, 137, 50, 224, 75, 75, 153, 97, 130, 82, 127, 62, 235, 37, 66, 252, 210, 90, 10, 130, 167, 216, 112, 39, 107, 28, 114, 157, 137, 25, 35, 167, 171, 79, 146, 16, 118, 71, 13, 103, 172, 110, 45, 129, 87, 192, 135, 34, 63, 86, 143, 152, 117, 128, 152, 149, 227, 30, 230, 199, 116, 46, 18, 174, 48, 54, 135, 213, 172 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("383d0e75-7e9b-4d40-9187-bd3fea0399e1"),
                            Bio = "",
                            Department = 5,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 136, 225, 171, 13, 52, 55, 68, 253, 25, 64, 84, 215, 234, 132, 115, 250, 220, 147, 231, 201, 217, 211, 245, 45, 50, 11, 239, 75, 31, 237, 179, 249, 101, 202, 65, 55, 64, 214, 173, 161, 236, 111, 50, 212, 203, 106, 114, 231, 103, 181, 13, 113, 65, 191, 151, 139, 135, 160, 105, 230, 39, 146, 197, 36 },
                            PasswordSalt = new byte[] { 0, 93, 119, 175, 163, 12, 129, 236, 127, 142, 115, 96, 189, 17, 140, 140, 126, 21, 28, 93, 166, 39, 84, 39, 248, 179, 35, 110, 19, 125, 147, 105, 94, 179, 109, 203, 209, 195, 167, 162, 31, 7, 10, 134, 225, 34, 33, 23, 88, 178, 1, 40, 160, 171, 127, 170, 87, 177, 231, 48, 52, 165, 90, 122, 35, 215, 98, 222, 147, 150, 231, 88, 49, 94, 182, 212, 76, 163, 208, 174, 191, 121, 73, 233, 193, 89, 236, 204, 132, 194, 161, 255, 36, 26, 225, 155, 203, 246, 170, 203, 91, 27, 199, 98, 231, 105, 226, 124, 233, 255, 85, 238, 182, 207, 118, 74, 126, 248, 142, 229, 135, 29, 176, 172, 151, 178, 209, 49 },
                            PhoneNumber = "home",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.Mentor", "Mentor")
                        .WithMany("Interns")
                        .HasForeignKey("MentorId");

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
