// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20220923115513_reset")]
    partial class reset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("MentorId");

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("45be124e-b908-45ba-b5ba-8afb698659bb"),
                            CreatedOn = new DateTime(2022, 9, 23, 11, 55, 12, 891, DateTimeKind.Utc).AddTicks(9845),
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("56128474-b5d6-4a4a-87ee-1880cd23a1f4"),
                            CreatedOn = new DateTime(2022, 9, 23, 11, 55, 12, 891, DateTimeKind.Utc).AddTicks(9847),
                            Status = 0
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("45be124e-b908-45ba-b5ba-8afb698659bb"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 83, 59, 25, 103, 225, 41, 104, 174, 99, 71, 70, 231, 90, 137, 131, 169, 105, 83, 33, 231, 155, 12, 90, 200, 227, 130, 75, 50, 108, 167, 241, 190, 31, 5, 202, 72, 102, 242, 70, 49, 111, 122, 172, 71, 172, 133, 156, 116, 165, 164, 12, 206, 3, 13, 176, 164, 109, 6, 226, 207, 99, 2, 250, 251 },
                            PasswordSalt = new byte[] { 250, 123, 201, 220, 182, 155, 117, 238, 233, 44, 211, 140, 88, 182, 201, 69, 235, 169, 97, 156, 146, 222, 129, 181, 186, 52, 53, 66, 206, 79, 104, 99, 10, 144, 24, 122, 103, 223, 244, 237, 166, 249, 231, 244, 104, 58, 154, 126, 95, 12, 168, 187, 182, 44, 39, 107, 123, 189, 178, 100, 17, 104, 214, 79, 13, 170, 192, 77, 109, 31, 172, 4, 149, 143, 49, 219, 116, 15, 142, 205, 69, 200, 143, 236, 122, 50, 231, 245, 0, 236, 197, 148, 8, 91, 178, 234, 160, 155, 126, 251, 167, 26, 131, 100, 140, 224, 235, 145, 192, 103, 227, 109, 246, 137, 235, 50, 59, 141, 181, 140, 125, 62, 43, 29, 130, 27, 119, 151 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("56128474-b5d6-4a4a-87ee-1880cd23a1f4"),
                            Bio = "",
                            Department = 0,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 210, 7, 129, 184, 102, 138, 126, 214, 183, 190, 250, 79, 71, 234, 254, 14, 255, 239, 179, 60, 30, 44, 116, 132, 176, 6, 186, 46, 151, 59, 114, 229, 49, 42, 109, 157, 141, 73, 76, 9, 46, 85, 116, 123, 211, 151, 88, 211, 139, 139, 92, 208, 6, 7, 20, 208, 235, 126, 166, 151, 99, 204, 129, 79 },
                            PasswordSalt = new byte[] { 17, 9, 219, 98, 6, 62, 115, 142, 235, 27, 252, 95, 188, 183, 6, 129, 127, 52, 184, 50, 192, 90, 228, 154, 78, 81, 28, 179, 1, 68, 206, 77, 104, 191, 191, 117, 98, 29, 199, 172, 154, 146, 60, 10, 148, 176, 242, 168, 52, 133, 86, 79, 10, 199, 84, 238, 72, 75, 196, 20, 96, 231, 172, 37, 122, 143, 179, 3, 183, 70, 46, 137, 239, 47, 154, 127, 255, 77, 113, 1, 229, 177, 56, 242, 59, 190, 105, 221, 89, 221, 29, 204, 231, 73, 42, 231, 122, 59, 31, 33, 84, 227, 56, 3, 226, 172, 221, 153, 19, 188, 185, 131, 19, 14, 4, 62, 185, 107, 171, 133, 123, 227, 114, 154, 137, 1, 136, 145 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("ce9af307-1103-4429-9b83-9d07095fbc1e"),
                            Bio = "",
                            Department = 5,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 1, 2, 33, 206, 247, 10, 146, 70, 3, 151, 236, 159, 199, 12, 207, 163, 191, 168, 128, 180, 214, 83, 113, 89, 29, 0, 92, 40, 88, 120, 7, 34, 120, 248, 198, 131, 45, 78, 163, 179, 154, 139, 208, 78, 244, 145, 113, 12, 220, 112, 154, 33, 55, 227, 131, 46, 116, 221, 233, 183, 74, 187, 159, 83 },
                            PasswordSalt = new byte[] { 240, 84, 29, 27, 121, 243, 237, 112, 72, 218, 78, 6, 254, 63, 107, 244, 245, 194, 169, 138, 98, 108, 99, 96, 251, 20, 178, 62, 94, 145, 101, 75, 148, 98, 100, 102, 13, 154, 49, 73, 22, 199, 70, 198, 114, 239, 63, 210, 95, 12, 140, 252, 13, 76, 110, 131, 91, 168, 36, 83, 110, 148, 100, 153, 131, 111, 169, 223, 183, 120, 217, 191, 193, 18, 92, 42, 80, 51, 50, 149, 138, 82, 110, 121, 54, 161, 9, 106, 126, 237, 41, 150, 80, 157, 212, 176, 8, 26, 80, 202, 185, 161, 245, 63, 156, 179, 203, 139, 219, 164, 45, 96, 135, 61, 204, 144, 98, 24, 207, 188, 244, 21, 70, 43, 191, 64, 31, 168 },
                            PhoneNumber = "home",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.Mentor", "Mentor")
                        .WithMany("Interns")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
