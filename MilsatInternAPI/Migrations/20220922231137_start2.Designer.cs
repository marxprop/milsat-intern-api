// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilsatInternAPI.Data;

#nullable disable

namespace MilsatInternAPI.Migrations
{
    [DbContext(typeof(MilsatInternAPIContext))]
    [Migration("20220922231137_start2")]
    partial class start2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CourseOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 9, 22, 23, 11, 37, 390, DateTimeKind.Utc).AddTicks(1757),
                            Status = 0,
                            UserId = new Guid("61c0d488-71d4-4db8-aaf6-4dcee14985a5")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 9, 22, 23, 11, 37, 390, DateTimeKind.Utc).AddTicks(1759),
                            Status = 0,
                            UserId = new Guid("96a7892b-f8b3-4384-9c81-e3e2c7ebd883")
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("MentorId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("61c0d488-71d4-4db8-aaf6-4dcee14985a5"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor1@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 56, 227, 77, 190, 253, 135, 234, 106, 18, 170, 188, 163, 195, 227, 230, 61, 169, 51, 83, 171, 109, 40, 55, 239, 219, 11, 240, 81, 168, 178, 55, 83, 34, 137, 67, 122, 45, 41, 201, 125, 126, 180, 60, 160, 49, 189, 162, 174, 123, 16, 189, 103, 246, 150, 94, 162, 165, 9, 133, 209, 80, 12, 129, 102 },
                            PasswordSalt = new byte[] { 188, 216, 190, 95, 207, 94, 172, 112, 101, 38, 157, 122, 47, 109, 158, 220, 54, 22, 50, 136, 47, 37, 248, 243, 159, 176, 47, 164, 105, 95, 32, 167, 17, 234, 155, 19, 162, 11, 86, 124, 234, 68, 163, 226, 73, 251, 116, 52, 222, 139, 6, 192, 226, 166, 97, 37, 177, 214, 131, 13, 188, 89, 110, 86, 70, 239, 227, 39, 244, 132, 71, 95, 176, 106, 27, 145, 233, 5, 157, 168, 187, 164, 7, 207, 66, 121, 45, 153, 92, 82, 203, 182, 143, 189, 173, 129, 248, 114, 75, 71, 96, 31, 128, 171, 125, 20, 191, 130, 111, 72, 236, 62, 165, 17, 45, 194, 96, 49, 155, 93, 41, 25, 67, 134, 213, 192, 56, 234 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("96a7892b-f8b3-4384-9c81-e3e2c7ebd883"),
                            Bio = "",
                            Department = 1,
                            Email = "mentor2@gmail.com",
                            FullName = "Sodiq Agboola",
                            Gender = 0,
                            PasswordHash = new byte[] { 217, 244, 95, 186, 92, 93, 54, 100, 200, 51, 85, 136, 120, 97, 222, 105, 83, 58, 158, 217, 157, 59, 38, 170, 55, 58, 59, 217, 10, 137, 55, 103, 189, 90, 59, 137, 244, 133, 44, 161, 192, 17, 200, 7, 190, 49, 28, 198, 47, 119, 36, 42, 197, 45, 79, 68, 230, 250, 108, 247, 80, 193, 62, 38 },
                            PasswordSalt = new byte[] { 159, 20, 5, 54, 123, 79, 237, 93, 155, 156, 128, 28, 103, 94, 234, 190, 155, 72, 2, 212, 109, 66, 115, 95, 87, 17, 189, 93, 155, 19, 5, 89, 213, 232, 132, 238, 155, 207, 238, 114, 238, 163, 3, 42, 15, 20, 168, 216, 246, 224, 138, 13, 120, 252, 5, 67, 184, 26, 11, 81, 191, 196, 64, 74, 35, 51, 15, 103, 182, 42, 174, 128, 100, 57, 14, 92, 185, 200, 197, 26, 139, 243, 71, 50, 182, 133, 14, 68, 38, 84, 135, 105, 47, 246, 181, 191, 6, 214, 28, 163, 59, 120, 186, 185, 51, 208, 78, 67, 109, 233, 99, 170, 162, 0, 152, 178, 108, 3, 248, 186, 213, 157, 76, 21, 94, 1, 82, 70 },
                            PhoneNumber = "string",
                            ProfilePicture = "",
                            Role = 1,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("d3baa9dd-146a-4e30-89c1-e49bd8aefd19"),
                            Bio = "",
                            Department = 6,
                            Email = "admin@milsat.com",
                            FullName = "Admin",
                            Gender = 0,
                            PasswordHash = new byte[] { 60, 122, 37, 234, 177, 95, 31, 80, 207, 24, 82, 50, 254, 78, 20, 236, 122, 124, 175, 108, 175, 190, 109, 215, 63, 101, 142, 63, 48, 44, 188, 11, 190, 222, 47, 218, 43, 174, 46, 125, 24, 184, 148, 149, 27, 95, 178, 87, 194, 69, 73, 171, 1, 254, 18, 171, 186, 70, 136, 101, 196, 28, 52, 168 },
                            PasswordSalt = new byte[] { 200, 210, 134, 137, 226, 197, 202, 235, 70, 123, 6, 57, 72, 21, 205, 174, 176, 94, 132, 137, 175, 197, 87, 23, 93, 55, 109, 57, 48, 66, 66, 33, 75, 15, 84, 100, 63, 140, 170, 91, 199, 222, 137, 222, 186, 2, 8, 51, 48, 80, 78, 112, 130, 238, 38, 157, 31, 176, 224, 254, 93, 58, 6, 13, 83, 85, 92, 72, 211, 85, 201, 54, 197, 97, 26, 91, 235, 10, 9, 8, 159, 81, 73, 220, 48, 160, 189, 38, 198, 55, 212, 216, 12, 21, 125, 121, 189, 96, 187, 72, 66, 40, 32, 213, 167, 248, 147, 164, 117, 115, 167, 139, 7, 128, 107, 55, 127, 6, 82, 243, 140, 43, 30, 50, 81, 185, 79, 59 },
                            PhoneNumber = "home",
                            ProfilePicture = "",
                            Role = 0,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Intern", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Intern")
                        .HasForeignKey("MilsatInternAPI.Models.Intern", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("MilsatInternAPI.Models.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.HasOne("MilsatInternAPI.Models.Mentor", null)
                        .WithMany("Interns")
                        .HasForeignKey("MentorId");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.Mentor", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("MilsatInternAPI.Models.User", b =>
                {
                    b.Navigation("Intern")
                        .IsRequired();

                    b.Navigation("Mentor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
